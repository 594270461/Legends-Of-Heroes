syntax = "proto3";
// using 

package ET;

//ResponseType ObjectQueryResponse
message ObjectQueryRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
}

//ResponseType A2M_Reload
message M2A_Reload // IActorRequest
{
	int32 RpcId = 1;
}

message A2M_Reload // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2G_LockResponse
message G2G_LockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2G_LockReleaseResponse
message G2G_LockReleaseRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Id = 2;
	string Address = 3;
}

message G2G_LockReleaseResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectAddResponse
message ObjectAddRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
}

message ObjectAddResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectLockResponse
message ObjectLockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 InstanceId = 3;
	int32 Time = 4;
}
message ObjectLockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectUnLockResponse
message ObjectUnLockRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
	int64 OldInstanceId = 3;
	int64 InstanceId = 4;
}
message ObjectUnLockResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectRemoveResponse
message ObjectRemoveRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
}
message ObjectRemoveResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType ObjectGetResponse
message ObjectGetRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 Key = 2;
}
message ObjectGetResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 InstanceId = 4;
}

//ResponseType G2R_GetLoginKey
message R2G_GetLoginKey // IActorRequest
{
	int32 RpcId = 1;
	string Account = 2;
}

message G2R_GetLoginKey // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Key = 4;
	int64 GateId = 5;
}

message G2M_SessionDisconnect // IActorLocationMessage
{
	int32 RpcId = 1;
}

message ObjectQueryResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	bytes Entity = 4;
}

//ResponseType M2M_UnitTransferResponse
message M2M_UnitTransferRequest // IActorRequest
{
	int32 RpcId = 1;
	int64 OldInstanceId = 2;
	bytes Unit = 3;
	repeated bytes Entitys = 4;
}

message M2M_UnitTransferResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}



///////////////////////////////// 房间相关  START ///////////////////////////////////

message L2G_GetRoomId // IActorResponse
{
  int32 RpcId = 1;
  int32 Error = 2;
  string Message = 3;

  int64 RoomId = 4;
}

//ResponseType M2L_CreateHeroUnit
message L2M_CreateHeroUnit // IActorRequest
{
  int32 RpcId = 1;
  int64 ActorId = 2;
  int64 PlayerId = 3;
  int64 GateSessionId = 4;
  int64 Roomid = 5;

  PlayerBattleInfo PlayerBattleInfo = 6;
}

//ResponseType M2L_PreparedToEnterBattle
message L2M_PreparedToEnterBattle // IActorRequest
{
  int32 RpcId = 1;
  int64 ActorId = 2;
  int64 Roomid = 3;
}

///////////////////////////////// 房间相关  END ///////////////////////////////////


///////////////////////////////// 副本相关  START ///////////////////////////////////

message M2L_CreateHeroUnit // IActorResponse
{
  int32 RpcId = 1;
  int32 Error = 2;
  string Message = 3;

  // 自己的unit id
  int64 UnitId = 4;
  // 所有的unit
  repeated UnitInfo Units = 5;
}

message M2L_PreparedToEnterBattle // IActorResponse
{
  int32 RpcId = 1;
  int32 Error = 2;
  string Message = 3;
}
///////////////////////////////// 副本相关  END ///////////////////////////////////